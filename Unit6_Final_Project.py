{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analyzing COVID-19 in the United States and Its Impact"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Throughout the final unit we have explored COVID-19 and its spread throughout the world. \n",
    "\n",
    "The visualizations in this notebook will focus on and explore its impact on the United States."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import all libraries you may need in this cell:\n",
    "import plotly.graph_objects as go\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.ticker as ticker"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1 - Finding the COVID-19 numbers per state."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#3 lists of data compiled for your convenience\n",
    "\n",
    "#List of states sorted in alphabetical order.\n",
    "statesList = [\"Alabama\",\"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\n",
    "  \"Connecticut\",\"Delaware\",\"Florida\",\"Georgia\",\"Hawaii\",\"Idaho\",\"Illinois\",\n",
    "  \"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\n",
    "  \"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\n",
    "  \"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\n",
    "  \"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\n",
    "  \"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\n",
    "  \"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"]\n",
    "\n",
    "#Corresponding latitudes for each state.\n",
    "latitudes = [32.361538, 58.301935, 33.448457, 34.736009, 38.555605, 39.7391667, 41.767, 39.161921, 30.4518, 33.76,\n",
    "            21.30895, 43.613739, 39.783250, 39.790942, 41.590939, 39.04, 38.197274, 30.45809, 44.323535, 38.972945,\n",
    "            42.2352, 42.7335, 44.95,32.320, 38.572954,46.595805,40.809868,39.160949,43.220093, 40.221741,35.667231,\n",
    "            42.659829,35.771, 48.813343,39.962245, 35.482309,44.931109, 40.269789, 41.82355, 34.000,  44.367966,36.165,\n",
    "            30.266667,40.7547,44.26639, 37.54, 47.042418,38.349497,43.074722, 41.145548]\n",
    "\n",
    "#Corresponding longitudes for each state.\n",
    "longitudes = [-86.279118,-134.419740,-112.073844, -92.331122,-121.468926 ,-104.984167 ,-72.677 , -75.526755 ,\n",
    "              -84.27277,-84.39,-157.826182 ,-116.237651 ,-89.650373 ,-86.147685 ,-93.620866 ,-95.69 , -84.86311\n",
    "              ,-91.140229 ,-69.765261 ,-76.501157 ,-71.0275 ,-84.5467 , -93.094 ,-90.207 , -92.189283\n",
    "              , -112.027031 ,-96.675345 ,-119.753877 ,-71.549127 , -74.756138, -105.964575 , -73.781339 ,-78.638 \n",
    "              ,-100.779004 ,-83.000647 , -97.534994,-123.029159 ,-76.875613 , -71.422132, -81.035, -100.336378\n",
    "              ,-86.784 ,-97.75 ,-111.892622 ,-72.57194 ,-77.46 ,-122.893077 ,-81.633294 ,-89.384444 ,-104.802042]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the New York Times' COVID-19 data(https://github.com/nytimes/covid-19-data/blob/master/us-states.csv) to create **two functions** that takes the name of a state as input and returns the bar plots of 1) # of cases over time and 2) # of deaths over time for that specific state."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>state</th>\n",
       "      <th>fips</th>\n",
       "      <th>cases</th>\n",
       "      <th>deaths</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-01-21</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-01-23</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-01-24</td>\n",
       "      <td>Illinois</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-01-24</td>\n",
       "      <td>Washington</td>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date       state  fips  cases  deaths\n",
       "0  2020-01-21  Washington    53      1       0\n",
       "1  2020-01-22  Washington    53      1       0\n",
       "2  2020-01-23  Washington    53      1       0\n",
       "3  2020-01-24    Illinois    17      1       0\n",
       "4  2020-01-24  Washington    53      1       0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def deathplot(timeSeriesData,state):\n",
    "    timeSeriesData = df.loc[:,['date','state','deaths']]\n",
    "    \n",
    "    timeSeriesData = timeSeriesData.loc[timeSeriesData['state'] == state]\n",
    "    \n",
    "    fig= plt.figure()\n",
    "    ax = fig.add_axes([0, 0, 2, 2])\n",
    "    dates= timeSeriesData['date']\n",
    "    numDeaths= timeSeriesData['deaths']\n",
    "    plt.title(\"COVID-19 Deaths in \" + state)\n",
    "    plt.plot (dates, numDeaths)\n",
    "    ax.bar(dates, numDeaths)\n",
    "    plt.xlabel(\"Date\")\n",
    "    plt.ylabel(\"Deaths\")\n",
    "    ax.xaxis.set_major_locator(plt.MaxNLocator(5))\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "def casesPlot(timeSeriesDataa, state):\n",
    "    \n",
    "    timeSeriesDataa = timeSeriesDataa.loc[:,['cases','date','state']]\n",
    "    \n",
    "    timeSeriesDataa =timeSeriesDataa.loc[timeSeriesDataa['state'] == state]\n",
    "    \n",
    "    fig= plt.figure()\n",
    "    ax = fig.add_axes([0, 0, 2, 2])\n",
    "    dates= timeSeriesDataa['date']\n",
    "    numCases= timeSeriesDataa['cases']\n",
    "    plt.title(\"COVID-19 Deaths in \" + state)\n",
    "    plt.plot (dates, numCases)\n",
    "    ax.bar(dates, numCases)\n",
    "    plt.xlabel(\"Date\")\n",
    "    plt.ylabel(\"Cases\")\n",
    "    ax.xaxis.set_major_locator(plt.MaxNLocator(5))\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Call the functions on your assigned state to visualize the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "deathplot(df, \"California\")\n",
    "casesPlot(df, \"California\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>2020-01-21</th>\n",
       "      <th>2020-01-22</th>\n",
       "      <th>2020-01-23</th>\n",
       "      <th>2020-01-24</th>\n",
       "      <th>2020-01-25</th>\n",
       "      <th>2020-01-26</th>\n",
       "      <th>2020-01-27</th>\n",
       "      <th>...</th>\n",
       "      <th>2020-05-31</th>\n",
       "      <th>2020-06-01</th>\n",
       "      <th>2020-06-02</th>\n",
       "      <th>2020-06-03</th>\n",
       "      <th>2020-06-04</th>\n",
       "      <th>2020-06-05</th>\n",
       "      <th>2020-06-06</th>\n",
       "      <th>2020-06-07</th>\n",
       "      <th>2020-06-08</th>\n",
       "      <th>2020-06-09</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Virginia</td>\n",
       "      <td>37.540000</td>\n",
       "      <td>-77.460000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>44607.0</td>\n",
       "      <td>45398.0</td>\n",
       "      <td>46239.0</td>\n",
       "      <td>46905.0</td>\n",
       "      <td>47856.0</td>\n",
       "      <td>48532.0</td>\n",
       "      <td>49397.0</td>\n",
       "      <td>50681.0</td>\n",
       "      <td>51251.0</td>\n",
       "      <td>51738.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Washington</td>\n",
       "      <td>47.042418</td>\n",
       "      <td>-122.893077</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>22543.0</td>\n",
       "      <td>23001.0</td>\n",
       "      <td>23336.0</td>\n",
       "      <td>23500.0</td>\n",
       "      <td>23722.0</td>\n",
       "      <td>24267.0</td>\n",
       "      <td>24486.0</td>\n",
       "      <td>25064.0</td>\n",
       "      <td>25593.0</td>\n",
       "      <td>25796.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>West Virginia</td>\n",
       "      <td>38.349497</td>\n",
       "      <td>-81.633294</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>2028.0</td>\n",
       "      <td>2056.0</td>\n",
       "      <td>2077.0</td>\n",
       "      <td>2102.0</td>\n",
       "      <td>2119.0</td>\n",
       "      <td>2136.0</td>\n",
       "      <td>2144.0</td>\n",
       "      <td>2161.0</td>\n",
       "      <td>2179.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Wisconsin</td>\n",
       "      <td>43.074722</td>\n",
       "      <td>-89.384444</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>18418.0</td>\n",
       "      <td>18556.0</td>\n",
       "      <td>18949.0</td>\n",
       "      <td>19614.0</td>\n",
       "      <td>20075.0</td>\n",
       "      <td>20427.0</td>\n",
       "      <td>20701.0</td>\n",
       "      <td>20950.0</td>\n",
       "      <td>21161.0</td>\n",
       "      <td>21435.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>41.145548</td>\n",
       "      <td>-104.802042</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>903.0</td>\n",
       "      <td>910.0</td>\n",
       "      <td>912.0</td>\n",
       "      <td>915.0</td>\n",
       "      <td>921.0</td>\n",
       "      <td>933.0</td>\n",
       "      <td>939.0</td>\n",
       "      <td>947.0</td>\n",
       "      <td>960.0</td>\n",
       "      <td>970.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 144 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            state        lat        long  2020-01-21  2020-01-22  2020-01-23  \\\n",
       "45       Virginia  37.540000  -77.460000         0.0         0.0         0.0   \n",
       "46     Washington  47.042418 -122.893077         1.0         1.0         1.0   \n",
       "47  West Virginia  38.349497  -81.633294         0.0         0.0         0.0   \n",
       "48      Wisconsin  43.074722  -89.384444         0.0         0.0         0.0   \n",
       "49        Wyoming  41.145548 -104.802042         0.0         0.0         0.0   \n",
       "\n",
       "    2020-01-24  2020-01-25  2020-01-26  2020-01-27  ...  2020-05-31  \\\n",
       "45         0.0         0.0         0.0         0.0  ...     44607.0   \n",
       "46         1.0         1.0         1.0         1.0  ...     22543.0   \n",
       "47         0.0         0.0         0.0         0.0  ...      2010.0   \n",
       "48         0.0         0.0         0.0         0.0  ...     18418.0   \n",
       "49         0.0         0.0         0.0         0.0  ...       903.0   \n",
       "\n",
       "    2020-06-01  2020-06-02  2020-06-03  2020-06-04  2020-06-05  2020-06-06  \\\n",
       "45     45398.0     46239.0     46905.0     47856.0     48532.0     49397.0   \n",
       "46     23001.0     23336.0     23500.0     23722.0     24267.0     24486.0   \n",
       "47      2028.0      2056.0      2077.0      2102.0      2119.0      2136.0   \n",
       "48     18556.0     18949.0     19614.0     20075.0     20427.0     20701.0   \n",
       "49       910.0       912.0       915.0       921.0       933.0       939.0   \n",
       "\n",
       "    2020-06-07  2020-06-08  2020-06-09  \n",
       "45     50681.0     51251.0     51738.0  \n",
       "46     25064.0     25593.0     25796.0  \n",
       "47      2144.0      2161.0      2179.0  \n",
       "48     20950.0     21161.0     21435.0  \n",
       "49       947.0       960.0       970.0  \n",
       "\n",
       "[5 rows x 144 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def dfFormatter(df, selectColumn):\n",
    "    df_formatted = pd.DataFrame(statesList, columns = ['state'])\n",
    "    df_formatted['lat'] = latitudes\n",
    "    df_formatted['long'] = longitudes\n",
    "\n",
    "    previousDate = \"2020- 01- 01\"\n",
    "    for i in range(len(df['date'])):\n",
    "        if df['date'][i] != previousDate:\n",
    "            df_formatted[df['date'][i]] = 0\n",
    "        \n",
    "    df_formatted.set_index('state', inplace = True)\n",
    "       \n",
    "    if selectColumn == 'cases':\n",
    "        for i in range(len(df['state'])):\n",
    "            df_formatted.loc[df['state'][i], df['date'][i]] = df['cases'][i]\n",
    "            \n",
    "    \n",
    "    if selectColumn == 'deaths':\n",
    "        for i in range(len(df['state'])):\n",
    "            df_formatted.loc[df['state'][i], df['date'][i]] = df['deaths'][i]\n",
    "    \n",
    "    \n",
    "    df_formatted.reset_index(inplace = True)\n",
    "\n",
    "    df_formatted.drop([50,51,52,53,54], inplace = True)\n",
    "    \n",
    "    return df_formatted\n",
    "\n",
    "\n",
    "df_cases = dfFormatter(df, \"cases\")\n",
    "df_deaths = dfFormatter(df, \"deaths\")\n",
    "df_cases.tail()\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use New York Times' COVID-19 data(https://github.com/nytimes/covid-19-data/blob/master/us-states.csv) to create a geographical scatterplot and choropleth map of the United States based on its numbers of COVID-19 cases and deaths. (Use colors that you think are appropriate)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "#def chlorodeaths(df, selectColumn):\n",
    "    \n",
    "stateAbbreviationList = [\"AL\",\"AK\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"FL\",\"GA\",\"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\n",
    "\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\"]\n",
    "    #state_list = stateAbbreviationList\n",
    "    #state_set = set(state_list)\n",
    "    #state_list = list(state_list)\n",
    "    #state_list.sort()\n",
    "    \n",
    "#cases_list = df['cases']\n",
    "#cases_set = set(cases_list)\n",
    "#cases_list = list(cases_list)\n",
    "#cases_list.sort()\n",
    "\n",
    "#deaths_list = df['deaths']\n",
    "#deaths_set = set(deaths_list)\n",
    "#deaths_list = list(deaths_list)\n",
    "#deaths_list.sort()\n",
    "\n",
    "\n",
    "\n",
    "#new_df = pd.DataFrame(list(zip(state_list, cases_list, deaths_list )),\n",
    "                     #columns = ['state','cases', 'deaths'])\n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'cases'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2656\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2657\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2658\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'cases'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-8-34b48806b4cc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mlocationmode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"USA-states\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;31m#ID data based on countries\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mlocations\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstateAbbreviationList\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;31m#location of data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mz\u001b[0m \u001b[0;34m=\u001b[0m  \u001b[0mdf_cases\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'cases'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;31m# measuring number of cases\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0mtext\u001b[0m \u001b[0;34m=\u001b[0m  \u001b[0mdf_cases\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'cases'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;31m#\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mcolorscale\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcolors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;31m#\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2925\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2926\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2927\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2929\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2657\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2658\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2659\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2660\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2661\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'cases'"
     ]
    }
   ],
   "source": [
    "colors = ['#fa3205','#fa3a05','#fa4205','#fa4f05','#fa5b05','#fa6305','#fa6f05','#fa8805','#fa9805','#faa805','#faa805','fac205','fae005','faef05','fafa05','effa05']\n",
    "\n",
    "fig = go.Figure(data=go.Choropleth(\n",
    "    locationmode = \"USA-states\", #ID data based on countries\n",
    "    locations = stateAbbreviationList, #location of data\n",
    "    z =  df_cases['cases'], # measuring number of cases\n",
    "    text =  df_cases['cases'], #\n",
    "    colorscale = colors, #\n",
    "    autocolorscale = False, #\n",
    "    reversescale = False, #\n",
    "    colorbar_title = \"Report of COVID-19 Cases\" # title of map\n",
    "))\n",
    "\n",
    "fig.update_layout(\n",
    "    title_text = \"Reported COVID-19 Cases in California\",\n",
    "    geo = dict(\n",
    "        showcoastlines = True,\n",
    "    ),\n",
    ")\n",
    "\n",
    "fig.show()\n",
    "\n",
    "#deaths\n",
    "fig = go.Figure(data=go.Choropleth(\n",
    "    locationmode = \"USA-states\", \n",
    "    locations = stateAbbreviationList, \n",
    "    z = df_deaths['deaths'], \n",
    "    text = df_deaths['deaths'], \n",
    "    colorscale = colors,\n",
    "    autocolorscale = False,\n",
    "    reversescale = False, \n",
    "    colorbar_title = \"Report of COVID-19 Deaths\"\n",
    "))\n",
    "\n",
    "fig.update_layout(\n",
    "    title_text = \"Reported COVID-19 Deaths in California\",\n",
    "    geo = dict(\n",
    "        showcoastlines = True,\n",
    "    ),\n",
    ")\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2 - Analyzing Its Impact on the United States"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Group 3 -\n",
    "\n",
    "The United States population is over 300 million, and numbers can be more meaningful when put into other perspectives. Using the following dataset from ourworldindata.org(https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv), create a bar plot for the number of total cases per million people and a bar plot for new cases per million people."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv\")\n",
    "#list for new cases, loc & total cases\n",
    "\n",
    "tcases_set = set(tcases_list)\n",
    "tcases_list = list(tcases_list)\n",
    "tcases_list.sort()\n",
    "\n",
    "ncases_tcases_list = df['total_cases_per_million']\n",
    "\n",
    "list = df['new_cases_per_million']\n",
    "ncases_set = set(ncases_list)\n",
    "ncases_list = list(ncases_list)\n",
    "\n",
    "ncases_list.sort()\n",
    "\n",
    "world_list = df['location'].tolist()\n",
    "world_set = set(world_list)\n",
    "world_list = list(world_set)\n",
    "\n",
    "world_list.sort()\n",
    "\n",
    "\n",
    "new_df = pd.DataFrame(list(zip(world_list, tcases_list, ncases_list )),\n",
    "                     columns = ['Country','Total cases per mil', 'New cases per mil'])\n",
    "new_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#making a bar plot for  total cases per million people\n",
    "\n",
    "ax = new_df[['Country','Total cases per mil']].plot(kind='bar', title = \"Total Cases per Million Around the World\", figsize=(13, 10), legend=True, fontsize=12)\n",
    "ax.set_xlabel(\"Countries\", fontsize=12)\n",
    "ax.set_ylabel(\"Total Cases per Million\", fontsize=12)\n",
    "plt.show()\n",
    "\n",
    "#making a bar plot for new cases per million people\n",
    " \n",
    "ax = new_df[['Country','New cases per mil']].plot(kind='bar', title = \"New Cases per Million Around the World\", figsize=(15, 10), legend=True, fontsize=12)\n",
    "ax.set_xlabel(\"Countries\", fontsize=12)\n",
    "ax.set_ylabel(\"New Cases per Million\", fontsize=12)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3 - Challenge (optional): Find a dataset online that explores other ways that COVID-19 has impacted the United States and use pandas and Plotly to create a visualization based on it.\n",
    "\n",
    "Some ideas:\n",
    "* number of business closures in each state over time\n",
    "* number of people telecommuting in the US\n",
    "* number of hospitalizations in each state\n",
    "\n",
    "etc.."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
